PipelineSecrets: {}
auth:
  keycloak:
    keycloak:
      existingSecret: auth-keycloak
      existingSecretKey: adminPassword
      persistence:
        dbVendor: postgres
        dbHost: jx-patroni.jx-staging.svc.cluster.local
        existingSecret: jx-patroni
        existingSecretPasswordKey: password-admin
        username: admin
      username: vault:staging/auth/postgres:adminUsername
  keycloakAdminPassword: vault:staging/auth/keycloak:adminPassword
  keycloakAdminUsername: vault:staging/auth/keycloak:adminUsername
cleanup:
  Annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: hook-succeeded
  Args:
  - --cleanup
demo-app:
  keycloak:
    redirectUris:
      allowAll: false
      domain: cloudnativeentrepreneur.dev
      includeNamespace: true
      serviceName: demo-app
domain: cloudnativeentrepreneur.dev
expose:
  Annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
  Args:
  - --v
  - 4
  config:
    domain: cloudnativeentrepreneur.dev
    exposer: Ingress
    http: "false"
    tlsSecretName: tls-cloudnativeentrepreneur-dev-p
    tlsacme: "true"
    urltemplate: '{{.Service}}-{{.Namespace}}.{{.Domain}}'
  production: true
jenkins:
  Servers:
    Global: {}
patroni:
  credentials:
    superuser: vault:staging/patroni:superuser
    admin: vault:staging/patroni:admin
    standby: vault:staging/patroni:standby
postgresAdminPassword: vault:staging/auth/postgres:adminPassword
postgresAdminUsername: vault:staging/auth/postgres:adminUsername
postgresql-ha:
  global:
    pgpool:
      adminPassword: vault:staging/auth/postgres:pgpoolAdminPassword
      adminUsername: vault:staging/auth/postgres:pgpoolAdminUsername
    postgresql:
      database: keycloak
      password: vault:staging/auth/postgres:adminPassword
      repmgrPassword: vault:staging/auth/postgres:repmgrPassword
      repmgrUsername: vault:staging/auth/postgres:repmgrUsername
      username: vault:staging/auth/postgres:adminUsername
  metrics:
    enabled: true
  networkPolicy:
    enabled: true
    allowExternal: false
  postgresql:
    replicaCount: 1
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app.kubernetes.io/component"
                  operator: In
                  values:
                    - postgresql
            topologyKey: kubernetes.io/hostname
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/component"
                    operator: In
                    values:
                      - postgresql
              topologyKey: failure-domain.beta.kubernetes.io/zone
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 256Mi
  pgpool:
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app.kubernetes.io/component"
                  operator: In
                  values:
                    - pgpool
            topologyKey: kubernetes.io/hostname
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/component"
                    operator: In
                    values:
                      - pgpool
              topologyKey: failure-domain.beta.kubernetes.io/zone
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 256Mi
prow: {}
